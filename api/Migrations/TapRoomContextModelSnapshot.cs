// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TapRoomApi.Helpers;

namespace TapRoomApi.Migrations
{
    [DbContext(typeof(TapRoomContext))]
    partial class TapRoomContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TapRoomApi.Entities.Beer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlcoholContent")
                        .HasColumnType("float");

                    b.Property<string>("Aroma")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flavor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pints")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("beer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlcoholContent = 5.5999999999999996,
                            Aroma = "Citrus, apple, Biscuit",
                            Brand = "Fremont",
                            Color = "Golden Caramel",
                            Flavor = "Pine, orange, bready",
                            Name = "Universale",
                            Pints = 124,
                            Price = 5.0
                        },
                        new
                        {
                            Id = 2,
                            AlcoholContent = 6.2000000000000002,
                            Aroma = "Orange, dank, juicy",
                            Brand = "Fremont",
                            Color = "Yellow amber",
                            Flavor = "Grapefruit, pine, honey",
                            Name = "Interurban",
                            Pints = 20,
                            Price = 5.0
                        },
                        new
                        {
                            Id = 3,
                            AlcoholContent = 7.4000000000000004,
                            Aroma = "Apple",
                            Brand = "Rileys",
                            Color = "Golden Caramel",
                            Flavor = "Pine, apple",
                            Name = "Round Trip",
                            Pints = 124,
                            Price = 9.0
                        },
                        new
                        {
                            Id = 4,
                            AlcoholContent = 5.5999999999999996,
                            Aroma = "Citrus, apple, Biscuit",
                            Brand = "Fremont",
                            Color = "Golden Caramel",
                            Flavor = "Pine, orange, bready",
                            Name = "Universale",
                            Pints = 124,
                            Price = 5.0
                        },
                        new
                        {
                            Id = 5,
                            AlcoholContent = 10.0,
                            Aroma = "Citrus, apple, Biscuit",
                            Brand = "Andy's",
                            Color = "Golden Brown",
                            Flavor = "Pine, orange, bready",
                            Name = "The Good Stuff",
                            Pints = 124,
                            Price = 12.0
                        });
                });

            modelBuilder.Entity("TapRoomApi.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.ToTable("review");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeerId = 4,
                            Description = "Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.",
                            Rating = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BeerId = 3,
                            Description = "At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores.",
                            Rating = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BeerId = 5,
                            Description = "Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.",
                            Rating = 4,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("TapRoomApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            FirstName = "admin",
                            LastName = "admin",
                            PasswordHash = new byte[] { 136, 63, 234, 173, 11, 53, 243, 131, 129, 183, 174, 40, 69, 136, 180, 172, 96, 9, 40, 245, 134, 238, 251, 123, 84, 114, 129, 84, 215, 119, 253, 89, 73, 238, 215, 51, 98, 98, 153, 202, 10, 29, 195, 130, 164, 50, 121, 240, 121, 200, 145, 122, 196, 96, 84, 241, 242, 244, 146, 203, 139, 30, 96, 252 },
                            PasswordSalt = new byte[] { 241, 22, 93, 19, 181, 239, 224, 31, 107, 232, 201, 127, 183, 68, 252, 238, 191, 125, 243, 110, 0, 97, 29, 18, 63, 28, 49, 172, 188, 133, 206, 120, 133, 102, 145, 191, 117, 51, 203, 80, 49, 115, 215, 146, 98, 211, 159, 46, 206, 0, 129, 240, 66, 71, 123, 242, 196, 54, 191, 127, 114, 83, 149, 115, 45, 49, 95, 175, 138, 130, 59, 237, 138, 243, 41, 12, 78, 190, 11, 111, 96, 9, 15, 131, 17, 183, 104, 230, 178, 249, 135, 104, 247, 235, 54, 187, 2, 161, 176, 50, 85, 142, 126, 193, 90, 238, 192, 37, 107, 171, 1, 98, 193, 221, 167, 179, 151, 115, 26, 136, 135, 53, 195, 162, 233, 63, 9, 107 },
                            Role = "admin",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "employee@gmail.com",
                            FirstName = "employee",
                            LastName = "employee",
                            PasswordHash = new byte[] { 136, 63, 234, 173, 11, 53, 243, 131, 129, 183, 174, 40, 69, 136, 180, 172, 96, 9, 40, 245, 134, 238, 251, 123, 84, 114, 129, 84, 215, 119, 253, 89, 73, 238, 215, 51, 98, 98, 153, 202, 10, 29, 195, 130, 164, 50, 121, 240, 121, 200, 145, 122, 196, 96, 84, 241, 242, 244, 146, 203, 139, 30, 96, 252 },
                            PasswordSalt = new byte[] { 241, 22, 93, 19, 181, 239, 224, 31, 107, 232, 201, 127, 183, 68, 252, 238, 191, 125, 243, 110, 0, 97, 29, 18, 63, 28, 49, 172, 188, 133, 206, 120, 133, 102, 145, 191, 117, 51, 203, 80, 49, 115, 215, 146, 98, 211, 159, 46, 206, 0, 129, 240, 66, 71, 123, 242, 196, 54, 191, 127, 114, 83, 149, 115, 45, 49, 95, 175, 138, 130, 59, 237, 138, 243, 41, 12, 78, 190, 11, 111, 96, 9, 15, 131, 17, 183, 104, 230, 178, 249, 135, 104, 247, 235, 54, 187, 2, 161, 176, 50, 85, 142, 126, 193, 90, 238, 192, 37, 107, 171, 1, 98, 193, 221, 167, 179, 151, 115, 26, 136, 135, 53, 195, 162, 233, 63, 9, 107 },
                            Role = "employee",
                            UserName = "employee"
                        },
                        new
                        {
                            Id = 3,
                            Email = "member@gmail.com",
                            FirstName = "member",
                            LastName = "member",
                            PasswordHash = new byte[] { 136, 63, 234, 173, 11, 53, 243, 131, 129, 183, 174, 40, 69, 136, 180, 172, 96, 9, 40, 245, 134, 238, 251, 123, 84, 114, 129, 84, 215, 119, 253, 89, 73, 238, 215, 51, 98, 98, 153, 202, 10, 29, 195, 130, 164, 50, 121, 240, 121, 200, 145, 122, 196, 96, 84, 241, 242, 244, 146, 203, 139, 30, 96, 252 },
                            PasswordSalt = new byte[] { 241, 22, 93, 19, 181, 239, 224, 31, 107, 232, 201, 127, 183, 68, 252, 238, 191, 125, 243, 110, 0, 97, 29, 18, 63, 28, 49, 172, 188, 133, 206, 120, 133, 102, 145, 191, 117, 51, 203, 80, 49, 115, 215, 146, 98, 211, 159, 46, 206, 0, 129, 240, 66, 71, 123, 242, 196, 54, 191, 127, 114, 83, 149, 115, 45, 49, 95, 175, 138, 130, 59, 237, 138, 243, 41, 12, 78, 190, 11, 111, 96, 9, 15, 131, 17, 183, 104, 230, 178, 249, 135, 104, 247, 235, 54, 187, 2, 161, 176, 50, 85, 142, 126, 193, 90, 238, 192, 37, 107, 171, 1, 98, 193, 221, 167, 179, 151, 115, 26, 136, 135, 53, 195, 162, 233, 63, 9, 107 },
                            Role = "member",
                            UserName = "member"
                        });
                });

            modelBuilder.Entity("TapRoomApi.Entities.Review", b =>
                {
                    b.HasOne("TapRoomApi.Entities.Beer", null)
                        .WithMany("Reviews")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
