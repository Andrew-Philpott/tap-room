// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TapRoomApi.Helpers;

namespace TapRoomApi.Migrations
{
    [DbContext(typeof(TapRoomContext))]
    partial class TapRoomContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TapRoomApi.Entities.Beer", b =>
                {
                    b.Property<int>("BeerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlcoholContent")
                        .HasColumnType("float");

                    b.Property<string>("Aroma")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flavor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pints")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("BeerId");

                    b.ToTable("Beer");

                    b.HasData(
                        new
                        {
                            BeerId = 1,
                            AlcoholContent = 5.5999999999999996,
                            Aroma = "Citrus, apple, Biscuit",
                            Brand = "Fremont",
                            Color = "Golden Caramel",
                            Flavor = "Pine, orange, bready",
                            Name = "Universale",
                            Pints = 124,
                            Price = 5.0
                        },
                        new
                        {
                            BeerId = 2,
                            AlcoholContent = 6.2000000000000002,
                            Aroma = "Orange, dank, juicy",
                            Brand = "Fremont",
                            Color = "Yellow amber",
                            Flavor = "Grapefruit, pine, honey",
                            Name = "Interurban",
                            Pints = 20,
                            Price = 5.0
                        },
                        new
                        {
                            BeerId = 3,
                            AlcoholContent = 7.4000000000000004,
                            Aroma = "Apple",
                            Brand = "Rileys",
                            Color = "Golden Caramel",
                            Flavor = "Pine, apple",
                            Name = "Round Trip",
                            Pints = 124,
                            Price = 9.0
                        },
                        new
                        {
                            BeerId = 4,
                            AlcoholContent = 5.5999999999999996,
                            Aroma = "Citrus, apple, Biscuit",
                            Brand = "Fremont",
                            Color = "Golden Caramel",
                            Flavor = "Pine, orange, bready",
                            Name = "Universale",
                            Pints = 124,
                            Price = 5.0
                        },
                        new
                        {
                            BeerId = 5,
                            AlcoholContent = 10.0,
                            Aroma = "Citrus, apple, Biscuit",
                            Brand = "Andy's",
                            Color = "Golden Brown",
                            Flavor = "Pine, orange, bready",
                            Name = "The Good Stuff",
                            Pints = 124,
                            Price = 12.0
                        });
                });

            modelBuilder.Entity("TapRoomApi.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("BeerId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            BeerId = 4,
                            Description = "Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.",
                            Rating = 4,
                            UserId = 1
                        },
                        new
                        {
                            ReviewId = 2,
                            BeerId = 3,
                            Description = "At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores.",
                            Rating = 3,
                            UserId = 2
                        },
                        new
                        {
                            ReviewId = 3,
                            BeerId = 5,
                            Description = "Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.",
                            Rating = 4,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("TapRoomApi.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@gmail.com",
                            FirstName = "admin",
                            LastName = "admin",
                            PasswordHash = new byte[] { 77, 9, 88, 71, 81, 75, 33, 145, 198, 186, 160, 197, 56, 143, 46, 172, 14, 218, 73, 158, 84, 251, 52, 82, 236, 231, 162, 138, 13, 2, 190, 73, 132, 187, 245, 204, 231, 83, 214, 15, 200, 120, 89, 64, 76, 38, 199, 15, 70, 20, 228, 50, 117, 55, 156, 176, 43, 108, 63, 227, 37, 207, 221, 195 },
                            PasswordSalt = new byte[] { 112, 215, 125, 250, 226, 129, 16, 129, 225, 121, 136, 109, 46, 17, 252, 237, 92, 161, 167, 233, 52, 146, 250, 34, 211, 41, 46, 209, 237, 45, 156, 0, 12, 90, 140, 8, 144, 190, 192, 7, 104, 5, 197, 219, 226, 224, 71, 197, 81, 19, 14, 255, 30, 156, 210, 166, 235, 44, 63, 247, 24, 234, 90, 98, 191, 0, 38, 89, 221, 219, 72, 22, 67, 238, 246, 86, 235, 151, 48, 191, 58, 158, 106, 59, 2, 100, 2, 47, 143, 158, 186, 42, 176, 114, 154, 242, 1, 78, 215, 183, 2, 99, 11, 75, 114, 32, 45, 155, 108, 6, 144, 196, 73, 185, 151, 39, 136, 253, 71, 118, 206, 103, 166, 160, 117, 172, 207, 66 },
                            Role = "admin",
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "employee@gmail.com",
                            FirstName = "employee",
                            LastName = "employee",
                            PasswordHash = new byte[] { 77, 9, 88, 71, 81, 75, 33, 145, 198, 186, 160, 197, 56, 143, 46, 172, 14, 218, 73, 158, 84, 251, 52, 82, 236, 231, 162, 138, 13, 2, 190, 73, 132, 187, 245, 204, 231, 83, 214, 15, 200, 120, 89, 64, 76, 38, 199, 15, 70, 20, 228, 50, 117, 55, 156, 176, 43, 108, 63, 227, 37, 207, 221, 195 },
                            PasswordSalt = new byte[] { 112, 215, 125, 250, 226, 129, 16, 129, 225, 121, 136, 109, 46, 17, 252, 237, 92, 161, 167, 233, 52, 146, 250, 34, 211, 41, 46, 209, 237, 45, 156, 0, 12, 90, 140, 8, 144, 190, 192, 7, 104, 5, 197, 219, 226, 224, 71, 197, 81, 19, 14, 255, 30, 156, 210, 166, 235, 44, 63, 247, 24, 234, 90, 98, 191, 0, 38, 89, 221, 219, 72, 22, 67, 238, 246, 86, 235, 151, 48, 191, 58, 158, 106, 59, 2, 100, 2, 47, 143, 158, 186, 42, 176, 114, 154, 242, 1, 78, 215, 183, 2, 99, 11, 75, 114, 32, 45, 155, 108, 6, 144, 196, 73, 185, 151, 39, 136, 253, 71, 118, 206, 103, 166, 160, 117, 172, 207, 66 },
                            Role = "employee",
                            UserName = "employee"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "member@gmail.com",
                            FirstName = "member",
                            LastName = "member",
                            PasswordHash = new byte[] { 77, 9, 88, 71, 81, 75, 33, 145, 198, 186, 160, 197, 56, 143, 46, 172, 14, 218, 73, 158, 84, 251, 52, 82, 236, 231, 162, 138, 13, 2, 190, 73, 132, 187, 245, 204, 231, 83, 214, 15, 200, 120, 89, 64, 76, 38, 199, 15, 70, 20, 228, 50, 117, 55, 156, 176, 43, 108, 63, 227, 37, 207, 221, 195 },
                            PasswordSalt = new byte[] { 112, 215, 125, 250, 226, 129, 16, 129, 225, 121, 136, 109, 46, 17, 252, 237, 92, 161, 167, 233, 52, 146, 250, 34, 211, 41, 46, 209, 237, 45, 156, 0, 12, 90, 140, 8, 144, 190, 192, 7, 104, 5, 197, 219, 226, 224, 71, 197, 81, 19, 14, 255, 30, 156, 210, 166, 235, 44, 63, 247, 24, 234, 90, 98, 191, 0, 38, 89, 221, 219, 72, 22, 67, 238, 246, 86, 235, 151, 48, 191, 58, 158, 106, 59, 2, 100, 2, 47, 143, 158, 186, 42, 176, 114, 154, 242, 1, 78, 215, 183, 2, 99, 11, 75, 114, 32, 45, 155, 108, 6, 144, 196, 73, 185, 151, 39, 136, 253, 71, 118, 206, 103, 166, 160, 117, 172, 207, 66 },
                            Role = "member",
                            UserName = "member"
                        });
                });

            modelBuilder.Entity("TapRoomApi.Entities.Review", b =>
                {
                    b.HasOne("TapRoomApi.Entities.Beer", "Beer")
                        .WithMany("Reviews")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TapRoomApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
