// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TapRoomApi.Helpers;

namespace TapRoomApi.Migrations
{
    [DbContext(typeof(TapRoomContext))]
    [Migration("20200515063108_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TapRoomApi.Entities.Beer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AlcoholContent")
                        .HasColumnType("double");

                    b.Property<string>("Aroma")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Brand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Color")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Flavor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Pints")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("beer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlcoholContent = 5.5999999999999996,
                            Aroma = "Citrus, apple, Biscuit",
                            Brand = "Fremont",
                            Color = "Golden Caramel",
                            Flavor = "Pine, orange, bready",
                            Name = "Universale",
                            Pints = 124,
                            Price = 5.0
                        },
                        new
                        {
                            Id = 2,
                            AlcoholContent = 6.2000000000000002,
                            Aroma = "Orange, dank, juicy",
                            Brand = "Fremont",
                            Color = "Yellow amber",
                            Flavor = "Grapefruit, pine, honey",
                            Name = "Interurban",
                            Pints = 20,
                            Price = 5.0
                        },
                        new
                        {
                            Id = 3,
                            AlcoholContent = 7.4000000000000004,
                            Aroma = "Apple",
                            Brand = "Rileys",
                            Color = "Golden Caramel",
                            Flavor = "Pine, apple",
                            Name = "Round Trip",
                            Pints = 124,
                            Price = 9.0
                        },
                        new
                        {
                            Id = 4,
                            AlcoholContent = 5.5999999999999996,
                            Aroma = "Citrus, apple, Biscuit",
                            Brand = "Fremont",
                            Color = "Golden Caramel",
                            Flavor = "Pine, orange, bready",
                            Name = "Universale",
                            Pints = 124,
                            Price = 5.0
                        },
                        new
                        {
                            Id = 5,
                            AlcoholContent = 10.0,
                            Aroma = "Citrus, apple, Biscuit",
                            Brand = "Andy's",
                            Color = "Golden Brown",
                            Flavor = "Pine, orange, bready",
                            Name = "The Good Stuff",
                            Pints = 124,
                            Price = 12.0
                        });
                });

            modelBuilder.Entity("TapRoomApi.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.ToTable("review");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeerId = 4,
                            Description = "Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.",
                            Rating = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BeerId = 3,
                            Description = "At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores.",
                            Rating = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BeerId = 5,
                            Description = "Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.",
                            Rating = 4,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("TapRoomApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("Role")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            FirstName = "admin",
                            LastName = "admin",
                            PasswordHash = new byte[] { 143, 159, 101, 112, 8, 133, 169, 85, 194, 202, 56, 68, 142, 163, 117, 106, 183, 170, 204, 22, 224, 129, 39, 111, 131, 125, 126, 61, 155, 215, 63, 166, 46, 61, 39, 172, 40, 57, 153, 69, 173, 42, 200, 253, 185, 38, 147, 98, 69, 130, 135, 154, 73, 236, 69, 52, 98, 71, 253, 232, 239, 19, 87, 23 },
                            PasswordSalt = new byte[] { 163, 205, 216, 120, 158, 213, 58, 48, 5, 142, 199, 121, 213, 184, 208, 195, 233, 117, 137, 112, 18, 217, 27, 250, 21, 233, 201, 170, 145, 57, 44, 60, 102, 166, 70, 140, 170, 108, 13, 211, 240, 197, 240, 94, 109, 15, 203, 75, 215, 213, 153, 121, 172, 234, 225, 235, 143, 229, 151, 139, 239, 70, 34, 234, 231, 227, 247, 46, 136, 194, 107, 221, 162, 219, 228, 11, 67, 250, 9, 174, 185, 186, 131, 106, 116, 189, 5, 161, 16, 219, 181, 98, 75, 129, 6, 144, 114, 35, 8, 21, 143, 242, 66, 186, 80, 230, 57, 58, 143, 221, 62, 243, 253, 144, 52, 89, 208, 53, 138, 115, 138, 105, 166, 251, 190, 202, 172, 35 },
                            Role = "admin",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "employee@gmail.com",
                            FirstName = "employee",
                            LastName = "employee",
                            PasswordHash = new byte[] { 143, 159, 101, 112, 8, 133, 169, 85, 194, 202, 56, 68, 142, 163, 117, 106, 183, 170, 204, 22, 224, 129, 39, 111, 131, 125, 126, 61, 155, 215, 63, 166, 46, 61, 39, 172, 40, 57, 153, 69, 173, 42, 200, 253, 185, 38, 147, 98, 69, 130, 135, 154, 73, 236, 69, 52, 98, 71, 253, 232, 239, 19, 87, 23 },
                            PasswordSalt = new byte[] { 163, 205, 216, 120, 158, 213, 58, 48, 5, 142, 199, 121, 213, 184, 208, 195, 233, 117, 137, 112, 18, 217, 27, 250, 21, 233, 201, 170, 145, 57, 44, 60, 102, 166, 70, 140, 170, 108, 13, 211, 240, 197, 240, 94, 109, 15, 203, 75, 215, 213, 153, 121, 172, 234, 225, 235, 143, 229, 151, 139, 239, 70, 34, 234, 231, 227, 247, 46, 136, 194, 107, 221, 162, 219, 228, 11, 67, 250, 9, 174, 185, 186, 131, 106, 116, 189, 5, 161, 16, 219, 181, 98, 75, 129, 6, 144, 114, 35, 8, 21, 143, 242, 66, 186, 80, 230, 57, 58, 143, 221, 62, 243, 253, 144, 52, 89, 208, 53, 138, 115, 138, 105, 166, 251, 190, 202, 172, 35 },
                            Role = "employee",
                            UserName = "employee"
                        },
                        new
                        {
                            Id = 3,
                            Email = "member@gmail.com",
                            FirstName = "member",
                            LastName = "member",
                            PasswordHash = new byte[] { 143, 159, 101, 112, 8, 133, 169, 85, 194, 202, 56, 68, 142, 163, 117, 106, 183, 170, 204, 22, 224, 129, 39, 111, 131, 125, 126, 61, 155, 215, 63, 166, 46, 61, 39, 172, 40, 57, 153, 69, 173, 42, 200, 253, 185, 38, 147, 98, 69, 130, 135, 154, 73, 236, 69, 52, 98, 71, 253, 232, 239, 19, 87, 23 },
                            PasswordSalt = new byte[] { 163, 205, 216, 120, 158, 213, 58, 48, 5, 142, 199, 121, 213, 184, 208, 195, 233, 117, 137, 112, 18, 217, 27, 250, 21, 233, 201, 170, 145, 57, 44, 60, 102, 166, 70, 140, 170, 108, 13, 211, 240, 197, 240, 94, 109, 15, 203, 75, 215, 213, 153, 121, 172, 234, 225, 235, 143, 229, 151, 139, 239, 70, 34, 234, 231, 227, 247, 46, 136, 194, 107, 221, 162, 219, 228, 11, 67, 250, 9, 174, 185, 186, 131, 106, 116, 189, 5, 161, 16, 219, 181, 98, 75, 129, 6, 144, 114, 35, 8, 21, 143, 242, 66, 186, 80, 230, 57, 58, 143, 221, 62, 243, 253, 144, 52, 89, 208, 53, 138, 115, 138, 105, 166, 251, 190, 202, 172, 35 },
                            Role = "member",
                            UserName = "member"
                        });
                });

            modelBuilder.Entity("TapRoomApi.Entities.Review", b =>
                {
                    b.HasOne("TapRoomApi.Entities.Beer", null)
                        .WithMany("Reviews")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
