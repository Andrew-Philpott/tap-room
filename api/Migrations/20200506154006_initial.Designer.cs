// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TapRoomApi.Helpers;

namespace TapRoomApi.Migrations
{
    [DbContext(typeof(TapRoomContext))]
    [Migration("20200506154006_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TapRoomApi.Entities.Beer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AlcoholContent")
                        .HasColumnType("double");

                    b.Property<string>("Aroma")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Brand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Color")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Flavor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Pints")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("beer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlcoholContent = 5.5999999999999996,
                            Aroma = "Citrus, apple, Biscuit",
                            Brand = "Fremont",
                            Color = "Golden Caramel",
                            Flavor = "Pine, orange, bready",
                            Name = "Universale",
                            Pints = 124,
                            Price = 5.0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AlcoholContent = 6.2000000000000002,
                            Aroma = "Orange, dank, juicy",
                            Brand = "Fremont",
                            Color = "Yellow amber",
                            Flavor = "Grapefruit, pine, honey",
                            Name = "Interurban",
                            Pints = 20,
                            Price = 5.0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            AlcoholContent = 7.4000000000000004,
                            Aroma = "Apple",
                            Brand = "Rileys",
                            Color = "Golden Caramel",
                            Flavor = "Pine, apple",
                            Name = "Round Trip",
                            Pints = 124,
                            Price = 9.0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            AlcoholContent = 5.5999999999999996,
                            Aroma = "Citrus, apple, Biscuit",
                            Brand = "Fremont",
                            Color = "Golden Caramel",
                            Flavor = "Pine, orange, bready",
                            Name = "Universale",
                            Pints = 124,
                            Price = 5.0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            AlcoholContent = 10.0,
                            Aroma = "Citrus, apple, Biscuit",
                            Brand = "Andy's",
                            Color = "Golden Brown",
                            Flavor = "Pine, orange, bready",
                            Name = "The Good Stuff",
                            Pints = 124,
                            Price = 12.0,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TapRoomApi.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.ToTable("review");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeerId = 4,
                            Description = "Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.",
                            Rating = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            BeerId = 3,
                            Description = "At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores.",
                            Rating = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BeerId = 5,
                            Description = "Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.",
                            Rating = 4,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("TapRoomApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("Role")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = new byte[] { 218, 131, 183, 163, 155, 60, 228, 30, 90, 244, 178, 12, 139, 45, 73, 133, 177, 196, 182, 122, 146, 182, 194, 121, 254, 254, 156, 199, 127, 74, 49, 22, 98, 78, 125, 34, 166, 239, 185, 10, 14, 253, 2, 104, 78, 55, 217, 112, 68, 124, 232, 158, 61, 105, 241, 132, 66, 109, 30, 53, 79, 54, 251, 59 },
                            PasswordSalt = new byte[] { 72, 161, 109, 219, 194, 170, 180, 193, 13, 4, 66, 205, 225, 32, 173, 14, 204, 98, 82, 112, 7, 160, 63, 190, 91, 173, 224, 144, 190, 226, 132, 179, 211, 92, 123, 53, 82, 7, 108, 227, 190, 114, 233, 216, 206, 84, 74, 141, 216, 31, 242, 58, 181, 171, 146, 241, 7, 229, 181, 157, 65, 14, 168, 251, 214, 157, 142, 245, 13, 193, 81, 119, 49, 62, 170, 71, 22, 201, 61, 192, 90, 153, 202, 13, 144, 135, 101, 95, 23, 2, 59, 106, 190, 80, 135, 199, 76, 58, 170, 63, 99, 190, 97, 59, 126, 96, 138, 6, 206, 209, 197, 161, 28, 78, 88, 185, 82, 156, 62, 1, 161, 146, 29, 88, 85, 73, 110, 125 },
                            Role = "Admin",
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "employeeserone@gmail.com",
                            FirstName = "Employee",
                            LastName = "One",
                            PasswordHash = new byte[] { 218, 131, 183, 163, 155, 60, 228, 30, 90, 244, 178, 12, 139, 45, 73, 133, 177, 196, 182, 122, 146, 182, 194, 121, 254, 254, 156, 199, 127, 74, 49, 22, 98, 78, 125, 34, 166, 239, 185, 10, 14, 253, 2, 104, 78, 55, 217, 112, 68, 124, 232, 158, 61, 105, 241, 132, 66, 109, 30, 53, 79, 54, 251, 59 },
                            PasswordSalt = new byte[] { 72, 161, 109, 219, 194, 170, 180, 193, 13, 4, 66, 205, 225, 32, 173, 14, 204, 98, 82, 112, 7, 160, 63, 190, 91, 173, 224, 144, 190, 226, 132, 179, 211, 92, 123, 53, 82, 7, 108, 227, 190, 114, 233, 216, 206, 84, 74, 141, 216, 31, 242, 58, 181, 171, 146, 241, 7, 229, 181, 157, 65, 14, 168, 251, 214, 157, 142, 245, 13, 193, 81, 119, 49, 62, 170, 71, 22, 201, 61, 192, 90, 153, 202, 13, 144, 135, 101, 95, 23, 2, 59, 106, 190, 80, 135, 199, 76, 58, 170, 63, 99, 190, 97, 59, 126, 96, 138, 6, 206, 209, 197, 161, 28, 78, 88, 185, 82, 156, 62, 1, 161, 146, 29, 88, 85, 73, 110, 125 },
                            Role = "Employee",
                            UserName = "EmployeeUserOne"
                        },
                        new
                        {
                            Id = 3,
                            Email = "employeeusertwo@gmail.com",
                            FirstName = "Employee",
                            LastName = "Two",
                            PasswordHash = new byte[] { 218, 131, 183, 163, 155, 60, 228, 30, 90, 244, 178, 12, 139, 45, 73, 133, 177, 196, 182, 122, 146, 182, 194, 121, 254, 254, 156, 199, 127, 74, 49, 22, 98, 78, 125, 34, 166, 239, 185, 10, 14, 253, 2, 104, 78, 55, 217, 112, 68, 124, 232, 158, 61, 105, 241, 132, 66, 109, 30, 53, 79, 54, 251, 59 },
                            PasswordSalt = new byte[] { 72, 161, 109, 219, 194, 170, 180, 193, 13, 4, 66, 205, 225, 32, 173, 14, 204, 98, 82, 112, 7, 160, 63, 190, 91, 173, 224, 144, 190, 226, 132, 179, 211, 92, 123, 53, 82, 7, 108, 227, 190, 114, 233, 216, 206, 84, 74, 141, 216, 31, 242, 58, 181, 171, 146, 241, 7, 229, 181, 157, 65, 14, 168, 251, 214, 157, 142, 245, 13, 193, 81, 119, 49, 62, 170, 71, 22, 201, 61, 192, 90, 153, 202, 13, 144, 135, 101, 95, 23, 2, 59, 106, 190, 80, 135, 199, 76, 58, 170, 63, 99, 190, 97, 59, 126, 96, 138, 6, 206, 209, 197, 161, 28, 78, 88, 185, 82, 156, 62, 1, 161, 146, 29, 88, 85, 73, 110, 125 },
                            Role = "Employee",
                            UserName = "EmployeeUserTwo"
                        },
                        new
                        {
                            Id = 4,
                            Email = "employeeusertwo@gmail.com",
                            FirstName = "Employee",
                            LastName = "Two",
                            PasswordHash = new byte[] { 218, 131, 183, 163, 155, 60, 228, 30, 90, 244, 178, 12, 139, 45, 73, 133, 177, 196, 182, 122, 146, 182, 194, 121, 254, 254, 156, 199, 127, 74, 49, 22, 98, 78, 125, 34, 166, 239, 185, 10, 14, 253, 2, 104, 78, 55, 217, 112, 68, 124, 232, 158, 61, 105, 241, 132, 66, 109, 30, 53, 79, 54, 251, 59 },
                            PasswordSalt = new byte[] { 72, 161, 109, 219, 194, 170, 180, 193, 13, 4, 66, 205, 225, 32, 173, 14, 204, 98, 82, 112, 7, 160, 63, 190, 91, 173, 224, 144, 190, 226, 132, 179, 211, 92, 123, 53, 82, 7, 108, 227, 190, 114, 233, 216, 206, 84, 74, 141, 216, 31, 242, 58, 181, 171, 146, 241, 7, 229, 181, 157, 65, 14, 168, 251, 214, 157, 142, 245, 13, 193, 81, 119, 49, 62, 170, 71, 22, 201, 61, 192, 90, 153, 202, 13, 144, 135, 101, 95, 23, 2, 59, 106, 190, 80, 135, 199, 76, 58, 170, 63, 99, 190, 97, 59, 126, 96, 138, 6, 206, 209, 197, 161, 28, 78, 88, 185, 82, 156, 62, 1, 161, 146, 29, 88, 85, 73, 110, 125 },
                            UserName = "EmployeeUserTwo"
                        },
                        new
                        {
                            Id = 5,
                            Email = "employeeusertwo@gmail.com",
                            FirstName = "Employee",
                            LastName = "Two",
                            PasswordHash = new byte[] { 218, 131, 183, 163, 155, 60, 228, 30, 90, 244, 178, 12, 139, 45, 73, 133, 177, 196, 182, 122, 146, 182, 194, 121, 254, 254, 156, 199, 127, 74, 49, 22, 98, 78, 125, 34, 166, 239, 185, 10, 14, 253, 2, 104, 78, 55, 217, 112, 68, 124, 232, 158, 61, 105, 241, 132, 66, 109, 30, 53, 79, 54, 251, 59 },
                            PasswordSalt = new byte[] { 72, 161, 109, 219, 194, 170, 180, 193, 13, 4, 66, 205, 225, 32, 173, 14, 204, 98, 82, 112, 7, 160, 63, 190, 91, 173, 224, 144, 190, 226, 132, 179, 211, 92, 123, 53, 82, 7, 108, 227, 190, 114, 233, 216, 206, 84, 74, 141, 216, 31, 242, 58, 181, 171, 146, 241, 7, 229, 181, 157, 65, 14, 168, 251, 214, 157, 142, 245, 13, 193, 81, 119, 49, 62, 170, 71, 22, 201, 61, 192, 90, 153, 202, 13, 144, 135, 101, 95, 23, 2, 59, 106, 190, 80, 135, 199, 76, 58, 170, 63, 99, 190, 97, 59, 126, 96, 138, 6, 206, 209, 197, 161, 28, 78, 88, 185, 82, 156, 62, 1, 161, 146, 29, 88, 85, 73, 110, 125 },
                            UserName = "EmployeeUserTwo"
                        });
                });

            modelBuilder.Entity("TapRoomApi.Entities.Review", b =>
                {
                    b.HasOne("TapRoomApi.Entities.Beer", null)
                        .WithMany("Reviews")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
